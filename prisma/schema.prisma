generator client {
  provider      = "prisma-client-js"
  output        = "../generated/prisma"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(cuid())
  exeId             String             @unique
  companyId         String             @default("LGLMKT")
  password          String
  leader            String?
  areaCode          String?
  exeName           String?
  exeNameOrig       String?
  role              String?
  areaName          String?
  region            String?
  subdivisionCode   String?
  imageLocation     String?
  isActive          Boolean            @default(true)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  customers         Customer[]
  documentNumbering DocumentNumbering?
  orders            Order[]

  @@map("users")
}

model Customer {
  id              String    @id @default(cuid())
  customerId      String    @unique
  exeId           String
  customerName    String
  addr1           String?
  addr2           String?
  addr3           String?
  city            String?
  route           String?
  phone1          String?
  phone2          String?
  phone3          String?
  additional      String?
  isActive        Boolean   @default(true)
  grade           String?
  contactName     String?
  contactPhone    String?
  startDate       DateTime?
  creditLimit     Decimal?  @db.Decimal(15, 2)
  creditPeriod    Int?
  comments        String?
  lastInvoiceDate DateTime?
  lastInvoiceAmt  Decimal?  @db.Decimal(15, 2)
  lastPaymentDate DateTime?
  lastPaymentAmt  Decimal?  @db.Decimal(15, 2)
  isInactive      Boolean   @default(false)
  isHold          Boolean   @default(false)
  followupStatus  String?
  location        String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  user            User      @relation(fields: [exeId], references: [exeId])
  invoices        Invoice[]
  orders          Order[]
  payments        Payment[]

  @@map("customers")
}

model Product {
  id                 String      @id @default(cuid())
  itemCode           String      @unique
  description        String
  category           String?
  subCategory        String?
  categoryCode       String?
  uom                String?
  price              Decimal     @db.Decimal(15, 2)
  qty                Int         @default(0)
  imageUrl           String?
  discountAmount     Decimal     @default(0) @db.Decimal(15, 2)
  discountPercentage Decimal     @default(0) @db.Decimal(5, 2)
  isActive           Boolean     @default(true)
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  orderItems         OrderItem[]

  @@map("products")
}

model Order {
  id            String      @id @default(cuid())
  orderNumber   String      @unique
  customerId    String
  salespersonId String
  status        String      @default("Pending")
  errorMessage  String?
  jsonPayload   String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  orderItems    OrderItem[]
  customer      Customer    @relation(fields: [customerId], references: [customerId])
  user          User        @relation(fields: [salespersonId], references: [exeId], onDelete: NoAction, onUpdate: NoAction)

  @@map("orders")
}

model OrderItem {
  id          String   @id @default(cuid())
  orderId     String
  productId   String
  quantity    Int
  unitPrice   Decimal  @db.Decimal(15, 2)
  discount    Decimal  @default(0) @db.Decimal(15, 2)
  totalAmount Decimal  @db.Decimal(15, 2)
  createdAt   DateTime @default(now())
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Invoice {
  id         String   @id @default(cuid())
  customerId String
  documentNo String   @unique
  docDate    DateTime
  docAmount  Decimal  @db.Decimal(15, 2)
  daysDue    Int?
  docType    String
  dueAmount  Decimal  @db.Decimal(15, 2)
  exeId      String?
  refNo      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  customer   Customer @relation(fields: [customerId], references: [customerId])

  @@map("invoices")
}

model Payment {
  id         String   @id @default(cuid())
  customerId String
  transNo    String   @unique
  transDate  DateTime
  amtBc      Decimal  @db.Decimal(15, 2)
  remUnappl  Decimal  @db.Decimal(15, 2)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  customer   Customer @relation(fields: [customerId], references: [customerId])

  @@map("payments")
}

model DocumentNumbering {
  id            String   @id @default(cuid())
  salespersonId String   @unique
  prefix        String
  currentNumber Int      @default(1)
  lastUpdated   DateTime @default(now())
  user          User     @relation(fields: [salespersonId], references: [exeId])

  @@map("document_numbering")
}

model UserLocation {
  id          String   @id @default(cuid())
  userCode    String
  latitude    Float
  longitude   Float
  description String?
  timestamp   DateTime @default(now())
  type        String   @default("login")
  createdAt   DateTime @default(now())

  @@map("user_locations")
}

model SalesReport {
  id           String   @id @default(cuid())
  date         DateTime
  customerId   String
  customerName String
  city         String?
  province     String?
  productId    String?
  productName  String?
  category     String?
  subCategory  String?
  quantity     Int
  unitPrice    Decimal  @db.Decimal(15, 2)
  totalSales   Decimal  @db.Decimal(15, 2)
  discount     Decimal  @default(0) @db.Decimal(15, 2)
  netSales     Decimal  @db.Decimal(15, 2)
  createdAt    DateTime @default(now())

  @@map("sales_reports")
}
