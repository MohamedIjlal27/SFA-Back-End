// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User/Executive model for authentication
model User {
  id              String   @id @default(cuid())
  exeId           String   @unique // Executive ID from Sage 300
  companyId       String   @default("LGLMKT")
  password        String
  leader          String?
  areaCode        String?
  exeName         String?
  exeNameOrig     String?
  role            String?
  areaName        String?
  region          String?
  subdivisionCode String?
  imageLocation   String?
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  customers       Customer[]
  orders          Order[]
  documentNumbering DocumentNumbering[]

  @@map("users")
}

// Customer model
model Customer {
  id              String   @id @default(cuid())
  customerId      String   @unique // Customer ID from Sage 300
  exeId           String
  customerName    String
  addr1           String?
  addr2           String?
  addr3           String?
  city            String?
  route           String?
  phone1          String?
  phone2          String?
  phone3          String?
  additional      String?
  isActive        Boolean  @default(true)
  grade           String?
  contactName     String?
  contactPhone    String?
  startDate       DateTime?
  creditLimit     Decimal? @db.Decimal(15, 2)
  creditPeriod    Int?
  comments        String?
  lastInvoiceDate DateTime?
  lastInvoiceAmt  Decimal? @db.Decimal(15, 2)
  lastPaymentDate DateTime?
  lastPaymentAmt  Decimal? @db.Decimal(15, 2)
  isInactive      Boolean  @default(false)
  isHold          Boolean  @default(false)
  followupStatus  String?
  location        String? // Format: "latitude,longitude"
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user            User     @relation(fields: [exeId], references: [exeId])
  orders          Order[]
  invoices        Invoice[]
  payments        Payment[]

  @@map("customers")
}

// Product/Item model
model Product {
  id                String   @id @default(cuid())
  itemCode          String   @unique
  description       String
  category          String?
  subCategory       String?
  categoryCode      String?
  uom               String?
  price             Decimal  @db.Decimal(15, 2)
  qty               Int      @default(0)
  imageUrl          String?
  discountAmount    Decimal  @default(0) @db.Decimal(15, 2)
  discountPercentage Decimal @default(0) @db.Decimal(5, 2)
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  orderItems        OrderItem[]

  @@map("products")
}

// Order model
model Order {
  id            String   @id @default(cuid())
  orderNumber   String   @unique
  customerId    String
  salespersonId String
  status        String   @default("Pending") // Pending, Processed, Failed
  errorMessage  String?
  jsonPayload   String   // JSON string of order details
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  customer      Customer   @relation(fields: [customerId], references: [customerId])
  user          User       @relation(fields: [salespersonId], references: [exeId], onDelete: NoAction, onUpdate: NoAction)
  orderItems    OrderItem[]

  @@map("orders")
}

// Order Item model
model OrderItem {
  id          String   @id @default(cuid())
  orderId     String
  productId   String
  quantity    Int
  unitPrice   Decimal  @db.Decimal(15, 2)
  discount    Decimal  @default(0) @db.Decimal(15, 2)
  totalAmount Decimal  @db.Decimal(15, 2)
  createdAt   DateTime @default(now())

  // Relations
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [productId], references: [id])

  @@map("order_items")
}

// Invoice model for customer invoices
model Invoice {
  id          String   @id @default(cuid())
  customerId  String
  documentNo  String   @unique
  docDate     DateTime
  docAmount   Decimal  @db.Decimal(15, 2)
  daysDue     Int?
  docType     String
  dueAmount   Decimal  @db.Decimal(15, 2)
  exeId       String?
  refNo       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  customer    Customer @relation(fields: [customerId], references: [customerId])

  @@map("invoices")
}

// Payment model for customer payments
model Payment {
  id          String   @id @default(cuid())
  customerId  String
  transNo     String   @unique
  transDate   DateTime
  amtBc       Decimal  @db.Decimal(15, 2)
  remUnappl   Decimal  @db.Decimal(15, 2)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  customer    Customer @relation(fields: [customerId], references: [customerId])

  @@map("payments")
}

// Document Numbering model for order generation
model DocumentNumbering {
  id            String   @id @default(cuid())
  salespersonId String   @unique
  prefix        String
  currentNumber Int      @default(1)
  lastUpdated   DateTime @default(now())

  // Relations
  user          User     @relation(fields: [salespersonId], references: [exeId])

  @@map("document_numbering")
}

// User Location model for tracking user locations
model UserLocation {
  id          String   @id @default(cuid())
  userCode    String   // Executive ID
  latitude    Float
  longitude   Float
  description String?
  timestamp   DateTime @default(now())
  type        String   @default("login") // login, logout, visit, etc.
  createdAt   DateTime @default(now())

  @@map("user_locations")
}

// Sales Report model for analytics
model SalesReport {
  id            String   @id @default(cuid())
  date          DateTime
  customerId    String
  customerName  String
  city          String?
  province      String?
  productId     String?
  productName   String?
  category      String?
  subCategory   String?
  quantity      Int
  unitPrice     Decimal  @db.Decimal(15, 2)
  totalSales    Decimal  @db.Decimal(15, 2)
  discount      Decimal  @default(0) @db.Decimal(15, 2)
  netSales      Decimal  @db.Decimal(15, 2)
  createdAt     DateTime @default(now())

  @@map("sales_reports")
}
